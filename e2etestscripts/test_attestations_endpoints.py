#!/usr/bin/env python3
"""
Operation Cerberus - Test Script for attestations.py endpoints
=============================================================
This script tests all endpoints in the attestations router.
Attestation endpoints handle Zero-Knowledge Proof submissions.
"""

import os
import sys
import requests
import json
from datetime import datetime
from typing import Dict, Optional

# Service Configuration
REGISTRY_A_URL = "http://localhost:8000"
ADMIN_API_KEY = "avreg_COs8OL3A7ENKZflsNyBvAsRv3v2jD4BUfrwE4uPmbeQ"

# Test results tracking
test_results = []

def print_test_header():
    """Print test script header"""
    print("\n" + "="*60)
    print("  OPERATION CERBERUS: attestations.py Endpoint Tests")
    print("="*60)
    print(f"Registry URL: {REGISTRY_A_URL}")
    print(f"Timestamp: {datetime.now().isoformat()}\n")

def log_result(passed: bool, method: str, endpoint: str, message: str = ""):
    """Log and print test result"""
    status = "[PASS]" if passed else "[FAIL]"
    result_msg = f"{status} {method} {endpoint}"
    if message and not passed:
        result_msg += f" - {message}"
    print(result_msg)
    test_results.append({
        "endpoint": f"{method} {endpoint}",
        "passed": passed,
        "message": message
    })

def test_attestation_health():
    """Test GET /api/v1/attestations/health endpoint"""
    try:
        response = requests.get(
            f"{REGISTRY_A_URL}/api/v1/attestations/health",
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            # Verify response structure
            if (data.get("status") == "healthy" and 
                data.get("service") == "attestations"):
                log_result(True, "GET", "/api/v1/attestations/health")
            else:
                log_result(False, "GET", "/api/v1/attestations/health", "Invalid response structure")
        else:
            log_result(False, "GET", "/api/v1/attestations/health", f"Status code: {response.status_code}")
            
    except Exception as e:
        log_result(False, "GET", "/api/v1/attestations/health", str(e))

def test_submit_valid_attestation():
    """Test POST /api/v1/attestations/submit with valid proof"""
    # Example valid attestation data
    # In a real scenario, this would be generated by a ZKP circuit
    attestation_data = {
        "circuit_id": "age_verification_v1",
        "proof_data": {
            "pi_a": [
                "0x1234567890abcdef1234567890abcdef12345678",
                "0xabcdef1234567890abcdef1234567890abcdef12"
            ],
            "pi_b": [
                [
                    "0x2234567890abcdef1234567890abcdef12345678",
                    "0x3234567890abcdef1234567890abcdef12345678"
                ],
                [
                    "0x4234567890abcdef1234567890abcdef12345678",
                    "0x5234567890abcdef1234567890abcdef12345678"
                ]
            ],
            "pi_c": [
                "0x6234567890abcdef1234567890abcdef12345678",
                "0x7234567890abcdef1234567890abcdef12345678"
            ],
            "protocol": "groth16"
        },
        "public_inputs": {
            "age_threshold": 18,
            "verification_timestamp": int(datetime.now().timestamp()),
            "issuer_public_key": "0x8234567890abcdef1234567890abcdef12345678"
        }
    }
    
    try:
        response = requests.post(
            f"{REGISTRY_A_URL}/api/v1/attestations/submit",
            json=attestation_data,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            # Verify response structure
            required_fields = ["status", "circuit_id", "message", "public_inputs"]
            
            if all(field in data for field in required_fields):
                # The status could be "verified" or "failed" depending on the verifier
                # For testing, we just check the response structure
                log_result(True, "POST", "/api/v1/attestations/submit (valid proof)")
                print(f"[INFO] Attestation status: {data['status']} - {data['message']}")
            else:
                log_result(False, "POST", "/api/v1/attestations/submit", "Invalid response structure")
        else:
            log_result(False, "POST", "/api/v1/attestations/submit", f"Status code: {response.status_code}")
            try:
                error_detail = response.json()
                print(f"[ERROR] Details: {error_detail}")
            except:
                print(f"[ERROR] Response: {response.text}")
                
    except Exception as e:
        log_result(False, "POST", "/api/v1/attestations/submit", str(e))

def test_submit_invalid_attestation():
    """Test POST /api/v1/attestations/submit with invalid proof"""
    # Intentionally malformed attestation data
    attestation_data = {
        "circuit_id": "invalid_circuit",
        "proof_data": {
            "invalid_field": "invalid_value"
        },
        "public_inputs": {}
    }
    
    try:
        response = requests.post(
            f"{REGISTRY_A_URL}/api/v1/attestations/submit",
            json=attestation_data,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        # We expect either a 200 with failed status or a 400/500 error
        if response.status_code == 200:
            data = response.json()
            if data.get("status") == "failed":
                log_result(True, "POST", "/api/v1/attestations/submit (invalid proof - expected failure)")
                print(f"[INFO] Invalid proof correctly rejected: {data['message']}")
            else:
                log_result(False, "POST", "/api/v1/attestations/submit (invalid proof)", 
                          "Expected failed status for invalid proof")
        elif response.status_code in [400, 422, 500]:
            # Server correctly rejected invalid data
            log_result(True, "POST", "/api/v1/attestations/submit (invalid proof - rejected)")
            print(f"[INFO] Invalid proof correctly rejected with status {response.status_code}")
        else:
            log_result(False, "POST", "/api/v1/attestations/submit (invalid proof)", 
                      f"Unexpected status code: {response.status_code}")
                
    except Exception as e:
        log_result(False, "POST", "/api/v1/attestations/submit (invalid proof)", str(e))

def test_submit_different_circuit_types():
    """Test POST /api/v1/attestations/submit with different circuit types"""
    # Test different circuit types that might be supported
    circuit_types = [
        {
            "name": "identity_verification",
            "circuit_id": "identity_verification_v1",
            "public_inputs": {
                "min_age": 21,
                "country_code": "US",
                "verification_level": "KYC_FULL"
            }
        },
        {
            "name": "balance_proof",
            "circuit_id": "balance_proof_v1",
            "public_inputs": {
                "min_balance": 1000,
                "currency": "AVT",
                "timestamp": int(datetime.now().timestamp())
            }
        },
        {
            "name": "reputation_score",
            "circuit_id": "reputation_score_v1",
            "public_inputs": {
                "min_score": 750,
                "score_type": "AGENT_REPUTATION",
                "validity_period": 86400  # 24 hours
            }
        }
    ]
    
    for circuit in circuit_types:
        attestation_data = {
            "circuit_id": circuit["circuit_id"],
            "proof_data": {
                "pi_a": ["0x1234", "0x5678"],
                "pi_b": [["0x9abc", "0xdef0"], ["0x1111", "0x2222"]],
                "pi_c": ["0x3333", "0x4444"],
                "protocol": "groth16"
            },
            "public_inputs": circuit["public_inputs"]
        }
        
        try:
            response = requests.post(
                f"{REGISTRY_A_URL}/api/v1/attestations/submit",
                json=attestation_data,
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if "status" in data and "circuit_id" in data:
                    log_result(True, "POST", f"/api/v1/attestations/submit ({circuit['name']})")
                    print(f"[INFO] {circuit['name']} result: {data['status']}")
                else:
                    log_result(False, "POST", f"/api/v1/attestations/submit ({circuit['name']})", 
                              "Invalid response structure")
            else:
                # Some circuit types might not be supported
                if response.status_code == 400:
                    log_result(True, "POST", f"/api/v1/attestations/submit ({circuit['name']} - unsupported)")
                    print(f"[INFO] Circuit type {circuit['name']} not supported (expected)")
                else:
                    log_result(False, "POST", f"/api/v1/attestations/submit ({circuit['name']})", 
                              f"Status code: {response.status_code}")
                    
        except Exception as e:
            log_result(False, "POST", f"/api/v1/attestations/submit ({circuit['name']})", str(e))

def test_submit_missing_fields():
    """Test POST /api/v1/attestations/submit with missing required fields"""
    # Test cases with missing fields
    test_cases = [
        {
            "name": "missing circuit_id",
            "data": {
                "proof_data": {"test": "data"},
                "public_inputs": {"test": "input"}
            }
        },
        {
            "name": "missing proof_data",
            "data": {
                "circuit_id": "test_circuit",
                "public_inputs": {"test": "input"}
            }
        },
        {
            "name": "missing public_inputs",
            "data": {
                "circuit_id": "test_circuit",
                "proof_data": {"test": "data"}
            }
        },
        {
            "name": "empty body",
            "data": {}
        }
    ]
    
    for test_case in test_cases:
        try:
            response = requests.post(
                f"{REGISTRY_A_URL}/api/v1/attestations/submit",
                json=test_case["data"],
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            
            # We expect 422 (Unprocessable Entity) for missing fields
            if response.status_code == 422:
                log_result(True, "POST", f"/api/v1/attestations/submit ({test_case['name']} - validation)")
                print(f"[INFO] {test_case['name']} correctly rejected with validation error")
            else:
                log_result(False, "POST", f"/api/v1/attestations/submit ({test_case['name']})", 
                          f"Expected 422, got {response.status_code}")
                    
        except Exception as e:
            log_result(False, "POST", f"/api/v1/attestations/submit ({test_case['name']})", str(e))

def main():
    """Run all tests for attestations.py endpoints"""
    print_test_header()
    
    print("[INFO] Testing attestation endpoints...\n")
    
    # Test 1: Health check
    test_attestation_health()
    
    # Test 2: Submit valid attestation
    test_submit_valid_attestation()
    
    # Test 3: Submit invalid attestation
    test_submit_invalid_attestation()
    
    # Test 4: Test different circuit types
    test_submit_different_circuit_types()
    
    # Test 5: Test missing fields validation
    test_submit_missing_fields()
    
    # Print summary
    print("\n" + "="*60)
    print("  TEST SUMMARY")
    print("="*60)
    
    passed = sum(1 for r in test_results if r["passed"])
    total = len(test_results)
    
    print(f"\nTests Passed: {passed}/{total}")
    
    if passed == total:
        print("\n[SUCCESS] All attestations.py endpoints verified successfully!")
    else:
        print(f"\n[FAILED] {total - passed} test(s) failed")
        print("\nFailed tests:")
        for result in test_results:
            if not result["passed"]:
                print(f"  - {result['endpoint']}: {result['message']}")
    
    # Save results
    results_file = "cerberus_attestations_test_results.json"
    with open(results_file, "w") as f:
        json.dump({
            "timestamp": datetime.now().isoformat(),
            "router": "attestations.py",
            "total_tests": total,
            "passed": passed,
            "failed": total - passed,
            "results": test_results
        }, f, indent=2)
    
    print(f"\nResults saved to {results_file}")
    
    return 0 if passed == total else 1

if __name__ == "__main__":
    sys.exit(main())
